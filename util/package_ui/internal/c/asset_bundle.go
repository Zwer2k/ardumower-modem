package c

import (
	"fmt"
	"os"
	"strings"
)

type AssetBundle []*Asset

func (f AssetBundle) Size() int {
	var result int
	for _, a := range f {
		result += len(a.Data)
	}

	return result
}
func (f *AssetBundle) Add(a *Asset) {
	(*f) = append((*f), a)
}

func (f *AssetBundle) GenerateHeaderFile(path string) error {
	w, err := os.Create(path)
	if err != nil {
		return err
	}
	defer w.Close()

	header := fmt.Sprintf(`#pragma once
// generated by /util/package_ui

const unsigned int asset_count = %d;

typedef struct {
	const char* path;
	const char* mime;
	const unsigned char* data;
	unsigned long size;
	const char* etag;
	const char* time;
} asset_t;

`, len(*f))
	header2 := fmt.Sprintf(`
const asset_t assets[%d] = {
`, len(*f))
	footer := `
};
`
	var items []string
	for _, a := range *f {
		items = append(items, a.AsStruct())
	}

	if _, err := w.Write([]byte(header)); err != nil {
		return err
	}

	for _, a := range *f {
		if _, err := w.Write([]byte(a.DataLine())); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(header2)); err != nil {
		return err
	}

	if _, err := w.Write([]byte(strings.Join(items, ",\n"))); err != nil {
		return err
	}

	if _, err := w.Write([]byte(footer)); err != nil {
		return err
	}

	return nil
}
